install.packages("AppliedPredictiveModeling"
)
install.packages("ElemStatLearn")
install.packages("pgmm")
install.packages("rpart")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
case
Case
segmentationOriginal
summary(segmentationOriginal)
segmentationOriginal$Case
training <- segmentationOriginal[,Case == 'Train']
testing <- segmentationOriginal[,Case == 'Test']
training <- segmentationOriginal[,segmentationOriginal$Case == 'Train']
testing <- segmentationOriginal[,segmentationOriginal$Case == 'Test']
segmentationOriginal$Case
training <- segmentationOriginal[,segmentationOriginal$Case == Train]
summary(segmentationOriginal$Case)
subset(segmentationOriginal, Case = 'Train']
subset(segmentationOriginal, Case = 'Train')
subset(segmentationOriginal, Case = 'Train')$Case
subset(segmentationOriginal, Case = "Train")
subset(segmentationOriginal, Case = "Train")$Case
subset(segmentationOriginal, Case = "Train")[1,]
which(segmentationOriginal, Case = "Train")
segmentationOriginal[c(1:3),segmentationOriginal$Case == "Train"]
segmentationOriginal[,segmentationOriginal$Case == "Train"]
class(segmentationOriginal)
data(iris)
iris
iris[,Species=="virginica"]
iris[,iris$Species=="virginica"]
iris[iris$Species=="virginica"]
iris[iris$Species=="virginica",]
training <- segmentationOriginal[segmentationOriginal$Case == "Train",]
testing <- segmentationOriginal[segmentationOriginal$Case == "Test",]
training
dim(training)
dim(testing)
training[1,]
summary(segmentationOriginal)
help(segmentationOriginal)
set.seed(125)
model <- train(Class ~ ., method = "rpart", data = training)
model$finalModel
373 / 1009
newdata.a <- data.frame(23000, 10, 2)
names(newdata.a) <- c("TotalIntench2", "FiberWidthCh1", "PerimStatusCh1")
predict(model, newdata = newdata.a)
newdata.a
names(segmentationOriginal)
original.names <- names(segmentationOriginal)
names(newdata.a) <- original.names
plot(M$finalModel)
plot(model$finalModel)
plot(model$finalModel)
text(model$finalModel)
library(rattle)
library(rpart)
library(rpart.plot)
fancyRpartPlot(modelfinalModel)
model
model$finalModel
plot(model$finalModel)
text(model$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
olive
summary(olive)
help(olive)
model <- train(Area ~ ., method = "rpart", data = olive)
model <- train(Class ~ ., method = "rpart", data = training)
model.olive <- train(Area ~ ., method = "rpart", data = olive)
model.olive$finalModel
predict(model.olive, newdata = newdata)
newdata = as.data.frame(t(colMeans(olive)))
predict(model.olive, newdata = newdata)
str(olive)
as.factor(olive$Area)
as.factor(olive$Area)$levels
levels(as.factor(olive$Area))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
head(trainSA)
help(SAhear)
help(SAheart)
model.heart <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = trainSA)
missClass(trainSA$chd, predict(model.heart, newdata = trainSA))
missClass(testSA$chd, predict(model.heart, newdata = testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train
str(vowel.train)
vowel.train$y.f <- as.factor(vowel.train$y)
vowel.test$y.f <- as.factor(vowel.test$y)
model.vowel <- train(, data = vowel.train, method = "rf", prox = TRUE)
model.vowel <- train(y.f ~ ., data = vowel.train, method = "rf", prox = TRUE)
library(caret)
varImp(model.vowel)
set.seed(33833)
varImp(model.vowel)
str(vowel.train)
model.vowel <- train(y.f ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10, data = vowel.train, method = "rf", prox = TRUE)
    
set.seed(33833)
varImp(model.vowel)
model.vowel <- train(y.f ~ x.1 + x.2 + x.3 + x.4 + x.5 + x.6 + x.7 + x.8 + x.9 + x.10, data = vowel.train, method = "rf", prox = TRUE)
set.seed(33833)
varImp(model.vowel)
str(vowel.train)
model.vowel <- train(y.f ~ x.1 + x.2 + x.3 + x.4 + x.5 + x.6 + x.7 + x.8 + x.9 + x.10, data = vowel.train, method = "rf", importance = FALSE)
    
set.seed(33833)
varImp(model.vowel)
